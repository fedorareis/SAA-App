/**
 * Copyright (c) 2016 Cal Poly Capstone Team Rocket
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy of
 * this software and associated documentation files (the "Software"), to deal in the
 * Software without restriction, including without limitation the rights to use, copy,
 * modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,
 * and to permit persons to whom the Software is furnished to do so, subject to
 * the following conditions:
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
 * INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
 * PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
 * HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
 * OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
 * SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
 *
 */
// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tcas.proto

#ifndef PROTOBUF_tcas_2eproto__INCLUDED
#define PROTOBUF_tcas_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3000000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3000000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

// Internal implementation detail -- do not call these.
void protobuf_AddDesc_tcas_2eproto();
void protobuf_AssignDesc_tcas_2eproto();
void protobuf_ShutdownFile_tcas_2eproto();

class TcasReport;

// ===================================================================

class TcasReport : public ::google::protobuf::Message {
 public:
  TcasReport();
  virtual ~TcasReport();

  TcasReport(const TcasReport& from);

  inline TcasReport& operator=(const TcasReport& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TcasReport& default_instance();

  void Swap(TcasReport* other);

  // implements Message ----------------------------------------------

  inline TcasReport* New() const { return New(NULL); }

  TcasReport* New(::google::protobuf::Arena* arena) const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TcasReport& from);
  void MergeFrom(const TcasReport& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(TcasReport* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return _internal_metadata_.arena();
  }
  inline void* MaybeArenaPtr() const {
    return _internal_metadata_.raw_arena_ptr();
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required sfixed32 id = 1;
  bool has_id() const;
  void clear_id();
  static const int kIdFieldNumber = 1;
  ::google::protobuf::int32 id() const;
  void set_id(::google::protobuf::int32 value);

  // required float range = 2;
  bool has_range() const;
  void clear_range();
  static const int kRangeFieldNumber = 2;
  float range() const;
  void set_range(float value);

  // required float altitude = 3;
  bool has_altitude() const;
  void clear_altitude();
  static const int kAltitudeFieldNumber = 3;
  float altitude() const;
  void set_altitude(float value);

  // required float bearing = 4;
  bool has_bearing() const;
  void clear_bearing();
  static const int kBearingFieldNumber = 4;
  float bearing() const;
  void set_bearing(float value);

  // optional uint32 plane_id = 5;
  bool has_plane_id() const;
  void clear_plane_id();
  static const int kPlaneIdFieldNumber = 5;
  ::google::protobuf::uint32 plane_id() const;
  void set_plane_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:TcasReport)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_range();
  inline void clear_has_range();
  inline void set_has_altitude();
  inline void clear_has_altitude();
  inline void set_has_bearing();
  inline void clear_has_bearing();
  inline void set_has_plane_id();
  inline void clear_has_plane_id();

  // helper for ByteSize()
  int RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 _has_bits_[1];
  mutable int _cached_size_;
  ::google::protobuf::int32 id_;
  float range_;
  float altitude_;
  float bearing_;
  ::google::protobuf::uint32 plane_id_;
  friend void  protobuf_AddDesc_tcas_2eproto();
  friend void protobuf_AssignDesc_tcas_2eproto();
  friend void protobuf_ShutdownFile_tcas_2eproto();

  void InitAsDefaultInstance();
  static TcasReport* default_instance_;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
// TcasReport

// required sfixed32 id = 1;
inline bool TcasReport::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TcasReport::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TcasReport::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TcasReport::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 TcasReport::id() const {
  // @@protoc_insertion_point(field_get:TcasReport.id)
  return id_;
}
inline void TcasReport::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
  // @@protoc_insertion_point(field_set:TcasReport.id)
}

// required float range = 2;
inline bool TcasReport::has_range() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TcasReport::set_has_range() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TcasReport::clear_has_range() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TcasReport::clear_range() {
  range_ = 0;
  clear_has_range();
}
inline float TcasReport::range() const {
  // @@protoc_insertion_point(field_get:TcasReport.range)
  return range_;
}
inline void TcasReport::set_range(float value) {
  set_has_range();
  range_ = value;
  // @@protoc_insertion_point(field_set:TcasReport.range)
}

// required float altitude = 3;
inline bool TcasReport::has_altitude() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TcasReport::set_has_altitude() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TcasReport::clear_has_altitude() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TcasReport::clear_altitude() {
  altitude_ = 0;
  clear_has_altitude();
}
inline float TcasReport::altitude() const {
  // @@protoc_insertion_point(field_get:TcasReport.altitude)
  return altitude_;
}
inline void TcasReport::set_altitude(float value) {
  set_has_altitude();
  altitude_ = value;
  // @@protoc_insertion_point(field_set:TcasReport.altitude)
}

// required float bearing = 4;
inline bool TcasReport::has_bearing() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TcasReport::set_has_bearing() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TcasReport::clear_has_bearing() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TcasReport::clear_bearing() {
  bearing_ = 0;
  clear_has_bearing();
}
inline float TcasReport::bearing() const {
  // @@protoc_insertion_point(field_get:TcasReport.bearing)
  return bearing_;
}
inline void TcasReport::set_bearing(float value) {
  set_has_bearing();
  bearing_ = value;
  // @@protoc_insertion_point(field_set:TcasReport.bearing)
}

// optional uint32 plane_id = 5;
inline bool TcasReport::has_plane_id() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TcasReport::set_has_plane_id() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TcasReport::clear_has_plane_id() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TcasReport::clear_plane_id() {
  plane_id_ = 0u;
  clear_has_plane_id();
}
inline ::google::protobuf::uint32 TcasReport::plane_id() const {
  // @@protoc_insertion_point(field_get:TcasReport.plane_id)
  return plane_id_;
}
inline void TcasReport::set_plane_id(::google::protobuf::uint32 value) {
  set_has_plane_id();
  plane_id_ = value;
  // @@protoc_insertion_point(field_set:TcasReport.plane_id)
}

#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_tcas_2eproto__INCLUDED
