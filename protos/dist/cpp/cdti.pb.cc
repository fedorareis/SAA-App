// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: cdti.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "cdti.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace {

const ::google::protobuf::Descriptor* Vector_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Vector_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDTIPlane_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTIPlane_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDTIPlane_Severity_descriptor_ = NULL;
const ::google::protobuf::Descriptor* CDTIReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDTIReport_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* CDTIReport_Severity_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_cdti_2eproto() {
  protobuf_AddDesc_cdti_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "cdti.proto");
  GOOGLE_CHECK(file != NULL);
  Vector_descriptor_ = file->message_type(0);
  static const int Vector_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, y_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, z_),
  };
  Vector_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      Vector_descriptor_,
      Vector::default_instance_,
      Vector_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _has_bits_[0]),
      -1,
      -1,
      sizeof(Vector),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Vector, _internal_metadata_),
      -1);
  CDTIPlane_descriptor_ = file->message_type(1);
  static const int CDTIPlane_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, position_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, velocity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, severity_),
  };
  CDTIPlane_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDTIPlane_descriptor_,
      CDTIPlane::default_instance_,
      CDTIPlane_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDTIPlane),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIPlane, _internal_metadata_),
      -1);
  CDTIPlane_Severity_descriptor_ = CDTIPlane_descriptor_->enum_type(0);
  CDTIReport_descriptor_ = file->message_type(2);
  static const int CDTIReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, ownship_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, advisorymessage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, advisorylevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, planes_),
  };
  CDTIReport_reflection_ =
    ::google::protobuf::internal::GeneratedMessageReflection::NewGeneratedMessageReflection(
      CDTIReport_descriptor_,
      CDTIReport::default_instance_,
      CDTIReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, _has_bits_[0]),
      -1,
      -1,
      sizeof(CDTIReport),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDTIReport, _internal_metadata_),
      -1);
  CDTIReport_Severity_descriptor_ = CDTIReport_descriptor_->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_cdti_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      Vector_descriptor_, &Vector::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDTIPlane_descriptor_, &CDTIPlane::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
      CDTIReport_descriptor_, &CDTIReport::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_cdti_2eproto() {
  delete Vector::default_instance_;
  delete Vector_reflection_;
  delete CDTIPlane::default_instance_;
  delete CDTIPlane_reflection_;
  delete CDTIReport::default_instance_;
  delete CDTIReport_reflection_;
}

void protobuf_AddDesc_cdti_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\ncdti.proto\")\n\006Vector\022\t\n\001X\030\001 \002(\002\022\t\n\001Y\030\002"
    " \002(\002\022\t\n\001Z\030\003 \002(\002\"\254\001\n\tCDTIPlane\022\n\n\002id\030\001 \002("
    "\t\022\031\n\010position\030\002 \002(\0132\007.Vector\022\031\n\010velocity"
    "\030\003 \002(\0132\007.Vector\022%\n\010severity\030\004 \002(\0162\023.CDTI"
    "Plane.Severity\"6\n\010Severity\022\r\n\tPROXIMATE\020"
    "\000\022\013\n\007TRAFFIC\020\001\022\016\n\nRESOLUTION\020\002\"\326\001\n\nCDTIR"
    "eport\022\021\n\ttimestamp\030\001 \002(\020\022\033\n\007ownship\030\002 \002("
    "\0132\n.CDTIPlane\022\027\n\017advisoryMessage\030\003 \001(\t\022+"
    "\n\radvisoryLevel\030\004 \001(\0162\024.CDTIReport.Sever"
    "ity\022\032\n\006planes\030\005 \003(\0132\n.CDTIPlane\"6\n\010Sever"
    "ity\022\r\n\tPROXIMATE\020\000\022\013\n\007TRAFFIC\020\001\022\016\n\nRESOL"
    "UTION\020\002B#\n\033edu.calpoly.capstone.sensorB\004"
    "Cdti", 484);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "cdti.proto", &protobuf_RegisterTypes);
  Vector::default_instance_ = new Vector();
  CDTIPlane::default_instance_ = new CDTIPlane();
  CDTIReport::default_instance_ = new CDTIReport();
  Vector::default_instance_->InitAsDefaultInstance();
  CDTIPlane::default_instance_->InitAsDefaultInstance();
  CDTIReport::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_cdti_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_cdti_2eproto {
  StaticDescriptorInitializer_cdti_2eproto() {
    protobuf_AddDesc_cdti_2eproto();
  }
} static_descriptor_initializer_cdti_2eproto_;

namespace {

static void MergeFromFail(int line) GOOGLE_ATTRIBUTE_COLD;
static void MergeFromFail(int line) {
  GOOGLE_CHECK(false) << __FILE__ << ":" << line;
}

}  // namespace


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int Vector::kXFieldNumber;
const int Vector::kYFieldNumber;
const int Vector::kZFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

Vector::Vector()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:Vector)
}

void Vector::InitAsDefaultInstance() {
}

Vector::Vector(const Vector& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:Vector)
}

void Vector::SharedCtor() {
  _cached_size_ = 0;
  x_ = 0;
  y_ = 0;
  z_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Vector::~Vector() {
  // @@protoc_insertion_point(destructor:Vector)
  SharedDtor();
}

void Vector::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Vector::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Vector::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Vector_descriptor_;
}

const Vector& Vector::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
  return *default_instance_;
}

Vector* Vector::default_instance_ = NULL;

Vector* Vector::New(::google::protobuf::Arena* arena) const {
  Vector* n = new Vector;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void Vector::Clear() {
#define ZR_HELPER_(f) reinterpret_cast<char*>(\
  &reinterpret_cast<Vector*>(16)->f)

#define ZR_(first, last) do {\
  ::memset(&first, 0,\
           ZR_HELPER_(last) - ZR_HELPER_(first) + sizeof(last));\
} while (0)

  ZR_(x_, z_);

#undef ZR_HELPER_
#undef ZR_

  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool Vector::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:Vector)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required float X = 1;
      case 1: {
        if (tag == 13) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
          set_has_x();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(21)) goto parse_Y;
        break;
      }

      // required float Y = 2;
      case 2: {
        if (tag == 21) {
         parse_Y:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
          set_has_y();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(29)) goto parse_Z;
        break;
      }

      // required float Z = 3;
      case 3: {
        if (tag == 29) {
         parse_Z:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &z_)));
          set_has_z();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:Vector)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:Vector)
  return false;
#undef DO_
}

void Vector::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:Vector)
  // required float X = 1;
  if (has_x()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // required float Y = 2;
  if (has_y()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // required float Z = 3;
  if (has_z()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->z(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:Vector)
}

::google::protobuf::uint8* Vector::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:Vector)
  // required float X = 1;
  if (has_x()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // required float Y = 2;
  if (has_y()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // required float Z = 3;
  if (has_z()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->z(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:Vector)
  return target;
}

int Vector::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_x()) {
    // required float X = 1;
    total_size += 1 + 4;
  }

  if (has_y()) {
    // required float Y = 2;
    total_size += 1 + 4;
  }

  if (has_z()) {
    // required float Z = 3;
    total_size += 1 + 4;
  }

  return total_size;
}
int Vector::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000007) ^ 0x00000007) == 0) {  // All required fields are present.
    // required float X = 1;
    total_size += 1 + 4;

    // required float Y = 2;
    total_size += 1 + 4;

    // required float Z = 3;
    total_size += 1 + 4;

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Vector::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const Vector* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const Vector>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Vector::MergeFrom(const Vector& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_x()) {
      set_x(from.x());
    }
    if (from.has_y()) {
      set_y(from.y());
    }
    if (from.has_z()) {
      set_z(from.z());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void Vector::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector::CopyFrom(const Vector& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Vector::Swap(Vector* other) {
  if (other == this) return;
  InternalSwap(other);
}
void Vector::InternalSwap(Vector* other) {
  std::swap(x_, other->x_);
  std::swap(y_, other->y_);
  std::swap(z_, other->z_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata Vector::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Vector_descriptor_;
  metadata.reflection = Vector_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// Vector

// required float X = 1;
bool Vector::has_x() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void Vector::set_has_x() {
  _has_bits_[0] |= 0x00000001u;
}
void Vector::clear_has_x() {
  _has_bits_[0] &= ~0x00000001u;
}
void Vector::clear_x() {
  x_ = 0;
  clear_has_x();
}
 float Vector::x() const {
  // @@protoc_insertion_point(field_get:Vector.X)
  return x_;
}
 void Vector::set_x(float value) {
  set_has_x();
  x_ = value;
  // @@protoc_insertion_point(field_set:Vector.X)
}

// required float Y = 2;
bool Vector::has_y() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void Vector::set_has_y() {
  _has_bits_[0] |= 0x00000002u;
}
void Vector::clear_has_y() {
  _has_bits_[0] &= ~0x00000002u;
}
void Vector::clear_y() {
  y_ = 0;
  clear_has_y();
}
 float Vector::y() const {
  // @@protoc_insertion_point(field_get:Vector.Y)
  return y_;
}
 void Vector::set_y(float value) {
  set_has_y();
  y_ = value;
  // @@protoc_insertion_point(field_set:Vector.Y)
}

// required float Z = 3;
bool Vector::has_z() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void Vector::set_has_z() {
  _has_bits_[0] |= 0x00000004u;
}
void Vector::clear_has_z() {
  _has_bits_[0] &= ~0x00000004u;
}
void Vector::clear_z() {
  z_ = 0;
  clear_has_z();
}
 float Vector::z() const {
  // @@protoc_insertion_point(field_get:Vector.Z)
  return z_;
}
 void Vector::set_z(float value) {
  set_has_z();
  z_ = value;
  // @@protoc_insertion_point(field_set:Vector.Z)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CDTIPlane_Severity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTIPlane_Severity_descriptor_;
}
bool CDTIPlane_Severity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDTIPlane_Severity CDTIPlane::PROXIMATE;
const CDTIPlane_Severity CDTIPlane::TRAFFIC;
const CDTIPlane_Severity CDTIPlane::RESOLUTION;
const CDTIPlane_Severity CDTIPlane::Severity_MIN;
const CDTIPlane_Severity CDTIPlane::Severity_MAX;
const int CDTIPlane::Severity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDTIPlane::kIdFieldNumber;
const int CDTIPlane::kPositionFieldNumber;
const int CDTIPlane::kVelocityFieldNumber;
const int CDTIPlane::kSeverityFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDTIPlane::CDTIPlane()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDTIPlane)
}

void CDTIPlane::InitAsDefaultInstance() {
  position_ = const_cast< ::Vector*>(&::Vector::default_instance());
  velocity_ = const_cast< ::Vector*>(&::Vector::default_instance());
}

CDTIPlane::CDTIPlane(const CDTIPlane& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDTIPlane)
}

void CDTIPlane::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  position_ = NULL;
  velocity_ = NULL;
  severity_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTIPlane::~CDTIPlane() {
  // @@protoc_insertion_point(destructor:CDTIPlane)
  SharedDtor();
}

void CDTIPlane::SharedDtor() {
  id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete position_;
    delete velocity_;
  }
}

void CDTIPlane::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTIPlane::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTIPlane_descriptor_;
}

const CDTIPlane& CDTIPlane::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
  return *default_instance_;
}

CDTIPlane* CDTIPlane::default_instance_ = NULL;

CDTIPlane* CDTIPlane::New(::google::protobuf::Arena* arena) const {
  CDTIPlane* n = new CDTIPlane;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDTIPlane::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    if (has_id()) {
      id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    if (has_position()) {
      if (position_ != NULL) position_->::Vector::Clear();
    }
    if (has_velocity()) {
      if (velocity_ != NULL) velocity_->::Vector::Clear();
    }
    severity_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDTIPlane::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDTIPlane)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string id = 1;
      case 1: {
        if (tag == 10) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->id().data(), this->id().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDTIPlane.id");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_position;
        break;
      }

      // required .Vector position = 2;
      case 2: {
        if (tag == 18) {
         parse_position:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_position()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_velocity;
        break;
      }

      // required .Vector velocity = 3;
      case 3: {
        if (tag == 26) {
         parse_velocity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_velocity()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_severity;
        break;
      }

      // required .CDTIPlane.Severity severity = 4;
      case 4: {
        if (tag == 32) {
         parse_severity:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDTIPlane_Severity_IsValid(value)) {
            set_severity(static_cast< ::CDTIPlane_Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDTIPlane)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDTIPlane)
  return false;
#undef DO_
}

void CDTIPlane::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDTIPlane)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDTIPlane.id");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->id(), output);
  }

  // required .Vector position = 2;
  if (has_position()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->position_, output);
  }

  // required .Vector velocity = 3;
  if (has_velocity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->velocity_, output);
  }

  // required .CDTIPlane.Severity severity = 4;
  if (has_severity()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->severity(), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDTIPlane)
}

::google::protobuf::uint8* CDTIPlane::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDTIPlane)
  // required string id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->id().data(), this->id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDTIPlane.id");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->id(), target);
  }

  // required .Vector position = 2;
  if (has_position()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->position_, target);
  }

  // required .Vector velocity = 3;
  if (has_velocity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, *this->velocity_, target);
  }

  // required .CDTIPlane.Severity severity = 4;
  if (has_severity()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->severity(), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDTIPlane)
  return target;
}

int CDTIPlane::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_id()) {
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());
  }

  if (has_position()) {
    // required .Vector position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);
  }

  if (has_velocity()) {
    // required .Vector velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);
  }

  if (has_severity()) {
    // required .CDTIPlane.Severity severity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());
  }

  return total_size;
}
int CDTIPlane::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x0000000f) ^ 0x0000000f) == 0) {  // All required fields are present.
    // required string id = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->id());

    // required .Vector position = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->position_);

    // required .Vector velocity = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->velocity_);

    // required .CDTIPlane.Severity severity = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->severity());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTIPlane::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDTIPlane* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDTIPlane>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTIPlane::MergeFrom(const CDTIPlane& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_has_id();
      id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.id_);
    }
    if (from.has_position()) {
      mutable_position()->::Vector::MergeFrom(from.position());
    }
    if (from.has_velocity()) {
      mutable_velocity()->::Vector::MergeFrom(from.velocity());
    }
    if (from.has_severity()) {
      set_severity(from.severity());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDTIPlane::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTIPlane::CopyFrom(const CDTIPlane& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTIPlane::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  if (has_position()) {
    if (!this->position_->IsInitialized()) return false;
  }
  if (has_velocity()) {
    if (!this->velocity_->IsInitialized()) return false;
  }
  return true;
}

void CDTIPlane::Swap(CDTIPlane* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDTIPlane::InternalSwap(CDTIPlane* other) {
  id_.Swap(&other->id_);
  std::swap(position_, other->position_);
  std::swap(velocity_, other->velocity_);
  std::swap(severity_, other->severity_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDTIPlane::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTIPlane_descriptor_;
  metadata.reflection = CDTIPlane_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDTIPlane

// required string id = 1;
bool CDTIPlane::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDTIPlane::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
void CDTIPlane::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDTIPlane::clear_id() {
  id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_id();
}
 const ::std::string& CDTIPlane::id() const {
  // @@protoc_insertion_point(field_get:CDTIPlane.id)
  return id_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDTIPlane::set_id(const ::std::string& value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTIPlane.id)
}
 void CDTIPlane::set_id(const char* value) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTIPlane.id)
}
 void CDTIPlane::set_id(const char* value, size_t size) {
  set_has_id();
  id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTIPlane.id)
}
 ::std::string* CDTIPlane::mutable_id() {
  set_has_id();
  // @@protoc_insertion_point(field_mutable:CDTIPlane.id)
  return id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDTIPlane::release_id() {
  clear_has_id();
  return id_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDTIPlane::set_allocated_id(::std::string* id) {
  if (id != NULL) {
    set_has_id();
  } else {
    clear_has_id();
  }
  id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), id);
  // @@protoc_insertion_point(field_set_allocated:CDTIPlane.id)
}

// required .Vector position = 2;
bool CDTIPlane::has_position() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDTIPlane::set_has_position() {
  _has_bits_[0] |= 0x00000002u;
}
void CDTIPlane::clear_has_position() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDTIPlane::clear_position() {
  if (position_ != NULL) position_->::Vector::Clear();
  clear_has_position();
}
const ::Vector& CDTIPlane::position() const {
  // @@protoc_insertion_point(field_get:CDTIPlane.position)
  return position_ != NULL ? *position_ : *default_instance_->position_;
}
::Vector* CDTIPlane::mutable_position() {
  set_has_position();
  if (position_ == NULL) {
    position_ = new ::Vector;
  }
  // @@protoc_insertion_point(field_mutable:CDTIPlane.position)
  return position_;
}
::Vector* CDTIPlane::release_position() {
  clear_has_position();
  ::Vector* temp = position_;
  position_ = NULL;
  return temp;
}
void CDTIPlane::set_allocated_position(::Vector* position) {
  delete position_;
  position_ = position;
  if (position) {
    set_has_position();
  } else {
    clear_has_position();
  }
  // @@protoc_insertion_point(field_set_allocated:CDTIPlane.position)
}

// required .Vector velocity = 3;
bool CDTIPlane::has_velocity() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDTIPlane::set_has_velocity() {
  _has_bits_[0] |= 0x00000004u;
}
void CDTIPlane::clear_has_velocity() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDTIPlane::clear_velocity() {
  if (velocity_ != NULL) velocity_->::Vector::Clear();
  clear_has_velocity();
}
const ::Vector& CDTIPlane::velocity() const {
  // @@protoc_insertion_point(field_get:CDTIPlane.velocity)
  return velocity_ != NULL ? *velocity_ : *default_instance_->velocity_;
}
::Vector* CDTIPlane::mutable_velocity() {
  set_has_velocity();
  if (velocity_ == NULL) {
    velocity_ = new ::Vector;
  }
  // @@protoc_insertion_point(field_mutable:CDTIPlane.velocity)
  return velocity_;
}
::Vector* CDTIPlane::release_velocity() {
  clear_has_velocity();
  ::Vector* temp = velocity_;
  velocity_ = NULL;
  return temp;
}
void CDTIPlane::set_allocated_velocity(::Vector* velocity) {
  delete velocity_;
  velocity_ = velocity;
  if (velocity) {
    set_has_velocity();
  } else {
    clear_has_velocity();
  }
  // @@protoc_insertion_point(field_set_allocated:CDTIPlane.velocity)
}

// required .CDTIPlane.Severity severity = 4;
bool CDTIPlane::has_severity() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDTIPlane::set_has_severity() {
  _has_bits_[0] |= 0x00000008u;
}
void CDTIPlane::clear_has_severity() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDTIPlane::clear_severity() {
  severity_ = 0;
  clear_has_severity();
}
 ::CDTIPlane_Severity CDTIPlane::severity() const {
  // @@protoc_insertion_point(field_get:CDTIPlane.severity)
  return static_cast< ::CDTIPlane_Severity >(severity_);
}
 void CDTIPlane::set_severity(::CDTIPlane_Severity value) {
  assert(::CDTIPlane_Severity_IsValid(value));
  set_has_severity();
  severity_ = value;
  // @@protoc_insertion_point(field_set:CDTIPlane.severity)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

const ::google::protobuf::EnumDescriptor* CDTIReport_Severity_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTIReport_Severity_descriptor_;
}
bool CDTIReport_Severity_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CDTIReport_Severity CDTIReport::PROXIMATE;
const CDTIReport_Severity CDTIReport::TRAFFIC;
const CDTIReport_Severity CDTIReport::RESOLUTION;
const CDTIReport_Severity CDTIReport::Severity_MIN;
const CDTIReport_Severity CDTIReport::Severity_MAX;
const int CDTIReport::Severity_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CDTIReport::kTimestampFieldNumber;
const int CDTIReport::kOwnshipFieldNumber;
const int CDTIReport::kAdvisoryMessageFieldNumber;
const int CDTIReport::kAdvisoryLevelFieldNumber;
const int CDTIReport::kPlanesFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CDTIReport::CDTIReport()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  SharedCtor();
  // @@protoc_insertion_point(constructor:CDTIReport)
}

void CDTIReport::InitAsDefaultInstance() {
  ownship_ = const_cast< ::CDTIPlane*>(&::CDTIPlane::default_instance());
}

CDTIReport::CDTIReport(const CDTIReport& from)
  : ::google::protobuf::Message(),
    _internal_metadata_(NULL) {
  SharedCtor();
  MergeFrom(from);
  // @@protoc_insertion_point(copy_constructor:CDTIReport)
}

void CDTIReport::SharedCtor() {
  ::google::protobuf::internal::GetEmptyString();
  _cached_size_ = 0;
  timestamp_ = GOOGLE_LONGLONG(0);
  ownship_ = NULL;
  advisorymessage_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  advisorylevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDTIReport::~CDTIReport() {
  // @@protoc_insertion_point(destructor:CDTIReport)
  SharedDtor();
}

void CDTIReport::SharedDtor() {
  advisorymessage_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != default_instance_) {
    delete ownship_;
  }
}

void CDTIReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDTIReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDTIReport_descriptor_;
}

const CDTIReport& CDTIReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_cdti_2eproto();
  return *default_instance_;
}

CDTIReport* CDTIReport::default_instance_ = NULL;

CDTIReport* CDTIReport::New(::google::protobuf::Arena* arena) const {
  CDTIReport* n = new CDTIReport;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void CDTIReport::Clear() {
  if (_has_bits_[0 / 32] & 15u) {
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_ownship()) {
      if (ownship_ != NULL) ownship_->::CDTIPlane::Clear();
    }
    if (has_advisorymessage()) {
      advisorymessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
    }
    advisorylevel_ = 0;
  }
  planes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  if (_internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->Clear();
  }
}

bool CDTIReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:CDTIReport)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoff(127);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required sfixed64 timestamp = 1;
      case 1: {
        if (tag == 9) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_SFIXED64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(18)) goto parse_ownship;
        break;
      }

      // required .CDTIPlane ownship = 2;
      case 2: {
        if (tag == 18) {
         parse_ownship:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ownship()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(26)) goto parse_advisoryMessage;
        break;
      }

      // optional string advisoryMessage = 3;
      case 3: {
        if (tag == 26) {
         parse_advisoryMessage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_advisorymessage()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
            this->advisorymessage().data(), this->advisorymessage().length(),
            ::google::protobuf::internal::WireFormat::PARSE,
            "CDTIReport.advisoryMessage");
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(32)) goto parse_advisoryLevel;
        break;
      }

      // optional .CDTIReport.Severity advisoryLevel = 4;
      case 4: {
        if (tag == 32) {
         parse_advisoryLevel:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::CDTIReport_Severity_IsValid(value)) {
            set_advisorylevel(static_cast< ::CDTIReport_Severity >(value));
          } else {
            mutable_unknown_fields()->AddVarint(4, value);
          }
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_planes;
        break;
      }

      // repeated .CDTIPlane planes = 5;
      case 5: {
        if (tag == 42) {
         parse_planes:
          DO_(input->IncrementRecursionDepth());
         parse_loop_planes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtualNoRecursionDepth(
                input, add_planes()));
        } else {
          goto handle_unusual;
        }
        if (input->ExpectTag(42)) goto parse_loop_planes;
        input->UnsafeDecrementRecursionDepth();
        if (input->ExpectAtEnd()) goto success;
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0 ||
            ::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:CDTIReport)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:CDTIReport)
  return false;
#undef DO_
}

void CDTIReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:CDTIReport)
  // required sfixed64 timestamp = 1;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteSFixed64(1, this->timestamp(), output);
  }

  // required .CDTIPlane ownship = 2;
  if (has_ownship()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->ownship_, output);
  }

  // optional string advisoryMessage = 3;
  if (has_advisorymessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advisorymessage().data(), this->advisorymessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDTIReport.advisoryMessage");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->advisorymessage(), output);
  }

  // optional .CDTIReport.Severity advisoryLevel = 4;
  if (has_advisorylevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      4, this->advisorylevel(), output);
  }

  // repeated .CDTIPlane planes = 5;
  for (unsigned int i = 0, n = this->planes_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->planes(i), output);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
  // @@protoc_insertion_point(serialize_end:CDTIReport)
}

::google::protobuf::uint8* CDTIReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // @@protoc_insertion_point(serialize_to_array_start:CDTIReport)
  // required sfixed64 timestamp = 1;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteSFixed64ToArray(1, this->timestamp(), target);
  }

  // required .CDTIPlane ownship = 2;
  if (has_ownship()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, *this->ownship_, target);
  }

  // optional string advisoryMessage = 3;
  if (has_advisorymessage()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8StringNamedField(
      this->advisorymessage().data(), this->advisorymessage().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE,
      "CDTIReport.advisoryMessage");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->advisorymessage(), target);
  }

  // optional .CDTIReport.Severity advisoryLevel = 4;
  if (has_advisorylevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      4, this->advisorylevel(), target);
  }

  // repeated .CDTIPlane planes = 5;
  for (unsigned int i = 0, n = this->planes_size(); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->planes(i), target);
  }

  if (_internal_metadata_.have_unknown_fields()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:CDTIReport)
  return target;
}

int CDTIReport::RequiredFieldsByteSizeFallback() const {
  int total_size = 0;

  if (has_timestamp()) {
    // required sfixed64 timestamp = 1;
    total_size += 1 + 8;
  }

  if (has_ownship()) {
    // required .CDTIPlane ownship = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ownship_);
  }

  return total_size;
}
int CDTIReport::ByteSize() const {
  int total_size = 0;

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required sfixed64 timestamp = 1;
    total_size += 1 + 8;

    // required .CDTIPlane ownship = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->ownship_);

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[2 / 32] & 12u) {
    // optional string advisoryMessage = 3;
    if (has_advisorymessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->advisorymessage());
    }

    // optional .CDTIReport.Severity advisoryLevel = 4;
    if (has_advisorylevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->advisorylevel());
    }

  }
  // repeated .CDTIPlane planes = 5;
  total_size += 1 * this->planes_size();
  for (int i = 0; i < this->planes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->planes(i));
  }

  if (_internal_metadata_.have_unknown_fields()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDTIReport::MergeFrom(const ::google::protobuf::Message& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  const CDTIReport* source = 
      ::google::protobuf::internal::DynamicCastToGenerated<const CDTIReport>(
          &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDTIReport::MergeFrom(const CDTIReport& from) {
  if (GOOGLE_PREDICT_FALSE(&from == this)) MergeFromFail(__LINE__);
  planes_.MergeFrom(from.planes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_ownship()) {
      mutable_ownship()->::CDTIPlane::MergeFrom(from.ownship());
    }
    if (from.has_advisorymessage()) {
      set_has_advisorymessage();
      advisorymessage_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.advisorymessage_);
    }
    if (from.has_advisorylevel()) {
      set_advisorylevel(from.advisorylevel());
    }
  }
  if (from._internal_metadata_.have_unknown_fields()) {
    mutable_unknown_fields()->MergeFrom(from.unknown_fields());
  }
}

void CDTIReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDTIReport::CopyFrom(const CDTIReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDTIReport::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_ownship()) {
    if (!this->ownship_->IsInitialized()) return false;
  }
  if (!::google::protobuf::internal::AllAreInitialized(this->planes())) return false;
  return true;
}

void CDTIReport::Swap(CDTIReport* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CDTIReport::InternalSwap(CDTIReport* other) {
  std::swap(timestamp_, other->timestamp_);
  std::swap(ownship_, other->ownship_);
  advisorymessage_.Swap(&other->advisorymessage_);
  std::swap(advisorylevel_, other->advisorylevel_);
  planes_.UnsafeArenaSwap(&other->planes_);
  std::swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  std::swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata CDTIReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDTIReport_descriptor_;
  metadata.reflection = CDTIReport_reflection_;
  return metadata;
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// CDTIReport

// required sfixed64 timestamp = 1;
bool CDTIReport::has_timestamp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
void CDTIReport::set_has_timestamp() {
  _has_bits_[0] |= 0x00000001u;
}
void CDTIReport::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000001u;
}
void CDTIReport::clear_timestamp() {
  timestamp_ = GOOGLE_LONGLONG(0);
  clear_has_timestamp();
}
 ::google::protobuf::int64 CDTIReport::timestamp() const {
  // @@protoc_insertion_point(field_get:CDTIReport.timestamp)
  return timestamp_;
}
 void CDTIReport::set_timestamp(::google::protobuf::int64 value) {
  set_has_timestamp();
  timestamp_ = value;
  // @@protoc_insertion_point(field_set:CDTIReport.timestamp)
}

// required .CDTIPlane ownship = 2;
bool CDTIReport::has_ownship() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
void CDTIReport::set_has_ownship() {
  _has_bits_[0] |= 0x00000002u;
}
void CDTIReport::clear_has_ownship() {
  _has_bits_[0] &= ~0x00000002u;
}
void CDTIReport::clear_ownship() {
  if (ownship_ != NULL) ownship_->::CDTIPlane::Clear();
  clear_has_ownship();
}
const ::CDTIPlane& CDTIReport::ownship() const {
  // @@protoc_insertion_point(field_get:CDTIReport.ownship)
  return ownship_ != NULL ? *ownship_ : *default_instance_->ownship_;
}
::CDTIPlane* CDTIReport::mutable_ownship() {
  set_has_ownship();
  if (ownship_ == NULL) {
    ownship_ = new ::CDTIPlane;
  }
  // @@protoc_insertion_point(field_mutable:CDTIReport.ownship)
  return ownship_;
}
::CDTIPlane* CDTIReport::release_ownship() {
  clear_has_ownship();
  ::CDTIPlane* temp = ownship_;
  ownship_ = NULL;
  return temp;
}
void CDTIReport::set_allocated_ownship(::CDTIPlane* ownship) {
  delete ownship_;
  ownship_ = ownship;
  if (ownship) {
    set_has_ownship();
  } else {
    clear_has_ownship();
  }
  // @@protoc_insertion_point(field_set_allocated:CDTIReport.ownship)
}

// optional string advisoryMessage = 3;
bool CDTIReport::has_advisorymessage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
void CDTIReport::set_has_advisorymessage() {
  _has_bits_[0] |= 0x00000004u;
}
void CDTIReport::clear_has_advisorymessage() {
  _has_bits_[0] &= ~0x00000004u;
}
void CDTIReport::clear_advisorymessage() {
  advisorymessage_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_advisorymessage();
}
 const ::std::string& CDTIReport::advisorymessage() const {
  // @@protoc_insertion_point(field_get:CDTIReport.advisoryMessage)
  return advisorymessage_.GetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDTIReport::set_advisorymessage(const ::std::string& value) {
  set_has_advisorymessage();
  advisorymessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:CDTIReport.advisoryMessage)
}
 void CDTIReport::set_advisorymessage(const char* value) {
  set_has_advisorymessage();
  advisorymessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:CDTIReport.advisoryMessage)
}
 void CDTIReport::set_advisorymessage(const char* value, size_t size) {
  set_has_advisorymessage();
  advisorymessage_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:CDTIReport.advisoryMessage)
}
 ::std::string* CDTIReport::mutable_advisorymessage() {
  set_has_advisorymessage();
  // @@protoc_insertion_point(field_mutable:CDTIReport.advisoryMessage)
  return advisorymessage_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 ::std::string* CDTIReport::release_advisorymessage() {
  clear_has_advisorymessage();
  return advisorymessage_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
 void CDTIReport::set_allocated_advisorymessage(::std::string* advisorymessage) {
  if (advisorymessage != NULL) {
    set_has_advisorymessage();
  } else {
    clear_has_advisorymessage();
  }
  advisorymessage_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), advisorymessage);
  // @@protoc_insertion_point(field_set_allocated:CDTIReport.advisoryMessage)
}

// optional .CDTIReport.Severity advisoryLevel = 4;
bool CDTIReport::has_advisorylevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
void CDTIReport::set_has_advisorylevel() {
  _has_bits_[0] |= 0x00000008u;
}
void CDTIReport::clear_has_advisorylevel() {
  _has_bits_[0] &= ~0x00000008u;
}
void CDTIReport::clear_advisorylevel() {
  advisorylevel_ = 0;
  clear_has_advisorylevel();
}
 ::CDTIReport_Severity CDTIReport::advisorylevel() const {
  // @@protoc_insertion_point(field_get:CDTIReport.advisoryLevel)
  return static_cast< ::CDTIReport_Severity >(advisorylevel_);
}
 void CDTIReport::set_advisorylevel(::CDTIReport_Severity value) {
  assert(::CDTIReport_Severity_IsValid(value));
  set_has_advisorylevel();
  advisorylevel_ = value;
  // @@protoc_insertion_point(field_set:CDTIReport.advisoryLevel)
}

// repeated .CDTIPlane planes = 5;
int CDTIReport::planes_size() const {
  return planes_.size();
}
void CDTIReport::clear_planes() {
  planes_.Clear();
}
const ::CDTIPlane& CDTIReport::planes(int index) const {
  // @@protoc_insertion_point(field_get:CDTIReport.planes)
  return planes_.Get(index);
}
::CDTIPlane* CDTIReport::mutable_planes(int index) {
  // @@protoc_insertion_point(field_mutable:CDTIReport.planes)
  return planes_.Mutable(index);
}
::CDTIPlane* CDTIReport::add_planes() {
  // @@protoc_insertion_point(field_add:CDTIReport.planes)
  return planes_.Add();
}
::google::protobuf::RepeatedPtrField< ::CDTIPlane >*
CDTIReport::mutable_planes() {
  // @@protoc_insertion_point(field_mutable_list:CDTIReport.planes)
  return &planes_;
}
const ::google::protobuf::RepeatedPtrField< ::CDTIPlane >&
CDTIReport::planes() const {
  // @@protoc_insertion_point(field_list:CDTIReport.planes)
  return planes_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

// @@protoc_insertion_point(global_scope)
